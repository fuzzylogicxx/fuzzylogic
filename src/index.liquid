---
layout: single_column_layout.liquid
title: Homepage
pageTitle: Welcome to my blog
pagination:
  data: collections.post
  size: 10
  reverse: true
  alias: posts
---

<div class="container">

  <section class="intro prose">

    <h1>Hi! I’m Laurence Hughes, a <span class="nobreak">web developer</span> from Glasgow.</h1>

    <p>I work on the front-end, creating responsive web apps and pattern libraries which balance design, technology and accessibility. In my spare time I make music, play  records and ping pongs. Fuzzy Logic is my online home, where I try out web stuff and ramble about code, music and more.</p>

  </section>

</div>

<div class="home-feed-wrap centre">

  <ul class="hfeed stack-spacious">
  {% for post in posts %}
    <li class="hentry">
      <div>
        <div> <!-- main content -->
            <h3 class="entry-title h2"><a rel="bookmark" href="{{ post.url | url }}">{{ post.data.pageTitle }}</a></h3>
            <div class="description entry-summary">
              <p>For a while now I’ve been using <a href="https://www.npmjs.com/package/gulp-autoprefixer">gulp-autoprefixer</a> as part of my front-end build system. It’s a means of writing standard CSS then having the system automatically parse the rules and generate any necessary vendor-prefixed versions (such as <code>::-webkit-input-placeholder</code>).</p>
              <p>I’ve often felt it excessive – like using a hammer to crack a nut. I’ve wondered if it might be doing more harm than good, by leading me to believe I have a magical sticking plaster for non-supporting browsers when actually (especially in the case of IE) the specific way in which a browser lacks support might be more nuanced. And I’ve never liked the noise generated by all those extra rules, especially when using the inspector to debug what would otherwise be just a few lines of CSS.</p>
              <p>But I always felt it was a necessary evil.</p>
              <p>However, I’ve just removed gulp-autoprefixer from my boilerplate. Why? Because:</p>
              <ol>
                <li>Browsers are no longer shipping any new CSS with prefixes, and as at 2019, they haven’t been for years;</li>
                <li>With the browsers that <em>do</em> require prefixed CSS now old and in the minority, it feels like progressive enhancement rather than “kitchen sink” autoprefixing should take care of them. (Those browsers might not get the enhanced experience but what they’ll get will be fine.)</li>
              </ol>
              <p><a href="https://twitter.com/jensimmons/status/1067833878025564163">Jen Simmons’ tweet</a> was the push I needed. It’s just taken ‘til now to take the plunge!</p>
              <p>So I’ve removed one layer of complexity from my set-up, and so far nothing has exploded. Let’s see how it goes.</p>
            </div>
        </div>
        <div> <!-- meta data -->
          <p class="entry-published date">{{ post.date | date: "%A, %b %d, %Y" }} <span style="display: block;">in <a href="/">Thoughts</a></span></p>
        </div>
      </div>
      <!-- <footer>more meta stuff</footer> -->
    </li>
  {% endfor %}
  </ul>

</div>
