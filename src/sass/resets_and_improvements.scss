///////////////////////////////////
// Tim Brown advice
///////////////////////////////////

// 1) CSS @viewport will eventually replace the viewport meta tag
@viewport {
  width: device-width;
}

// 2) Per normalize.css, do NOT zoom on rotate (but allow text to still be zoomed)
// Note: TB suggests enabling zoom on rotate but my testing revealed i) janky font size adjustments on orientation change in iOS; and ii) wrong pre>code font sizes.
html {
  -webkit-text-size-adjust: 100%;
}

// End Tim Brown advice




///////////////////////////////////
// Box-sizing
///////////////////////////////////

// The browser default, 'content-box', applies the element‘s declared width to its content only, placing padding and border outside the element's box.
// This effectively increases how much space the element takes up.
// border-box puts the padding and border inside the box so box is as wide as the width we declared.
// Also, use the 'inheritance' based approach https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/
// This approach means that if we need to include a third-party component and don't want to mess with its box-model...
// then we can reset it to normal using .component { box-sizing: content-box; } and won't have any inheritance issues with child elements

html {
  box-sizing: border-box;
}
*, *:before, *:after {
  box-sizing: inherit;
}




///////////////////////////////////
// Reset
///////////////////////////////////

// We’re now resetting much less aggressively than previous versions. I’ve found that resetting aggressive only:
// i) breaks default elements (forms, lists etc) so is less resilient; and
// ii) makes bringing in 3rd party CSS components more difficult because rules tend to conflict with reset rules.

// Remove margins and padding
// Exclude form fields – they deserve special attention.

body,
h1, h2, h3, h4, h5, h6,
p,
dd,
figure,
figcaption,
dl,
dd,
dt,
hr,
pre {
  margin: 0;
  padding: 0;

  // other possible values we can bring in if we find a need.
  // vertical-align: baseline;
  // border: 0;
  // font: inherit;
}

ul,
ol {
  margin-top: 0;
  margin-bottom: 0;
  padding-top: 0;
  padding-bottom: 0;
}


// Render HTML5 structural elements correctly

main, article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}




////////////////////////////////////
// Images
///////////////////////////////////

img {
  // normalize.css says "Remove the border on images inside links in IE 10."
  border-style: none;

  // Set images to display block globally because can’t think
  // of anywhere you wouldn’t want this to be the case.
  display: block;

  // Support responsive images.
  // We can make large <img>s available to wide and narrow viewports alike,
  // safe in the knowledge that even if an image is wider than its container,
  // it will not overflow.
  // Now the image’s width will match one of three values:
  // 1. Its own intrinsic/natural width, based on the file data; OR
  // 2. An explicit HTML width attribute value, if present;
  // 3. The width of the horizontal space afforded by the container element; OR
  // 4. 55rem (a sensible image width limit) if the container is wider than that.
  max-width: 100%;
  max-width: m#{i}n(60rem, 100%); // 1) To Do: remove workaround syntax for gulp/node-sass asap. 2) 60rem seems a reasonable limit. Can tweak later.

  //width: 100%; // grow and shrink in a RWD-stylee
  //height: auto;
}

// Ensure correct aspect ratio is preserved when
// max-width: 100% is triggered and image
// has the HTML height attribute set,
// while doing no harm otherwise.
img[height] {
  height: auto;
}

// Our <img>s with multiple file options via srcset (with sizes)
// likely include HTML width and height attributes for the paint/perf benefits.
// However if the width attr value is smaller than 100% container-width,
// max-width: 100% stops the image growing at THAT width
// EVEN IF srcset includes wider images which could fill
// 100%-container-width.
// This rule fixes that.
// I’m deciding to make it a default for now because
// it also leaves “basic images” unaffected.
// The alternative is to scope it to .responsive-img[width] but doesn’t seem necessary.
// img[width] {
//   width: auto;
// }

// explictly set an image to 100% container-width even if
// it has a width attribute (present for performance reasons) set to something narrower.
// Note: I have not included height: auto. It’s only required when the image has the
// HTML height attribute set, and I already have a rule dealing with that scenario above.
.img-full-parent-width {
  width: 100%;
}




///////////////////////////////////
// Alignment of embedded stuff
///////////////////////////////////

// Remove the gap between audio, canvas, iframes, images, videos and the bottom of their containers: (from H5BP’s main.css https://github.com/h5bp/html5-boilerplate/issues/440)

audio,
canvas,
iframe,
img,
svg,
video {
    vertical-align: middle;
}




///////////////////////////////////
// Selected text
///////////////////////////////////

// Customized to match the site’s design.

::selection {
  background: $selected-text-background;
  text-shadow: none;
}




///////////////////////////////////
// Hiding things
///////////////////////////////////

// hidden: hides things not just visually but also from assistive technologies (similar to display: none)
// a boolean attribute indicating that an element is not yet relevant, or no longer relevant.
// It’s not supported in IE under IE11, so...
// normalize.css: "Add the correct display in IE 10."

[hidden] {
  display: none;
}

// H5BP’s main.css: Hide only visually, but make available to screen readers.
// Now includes Joe Watkins’s suggested updates (ref https://zellwk.com/blog/hide-content-accessibly/)
// NB .a11y-only (meaning "for accessibility aids only" - credit @wilto) feels like a better class name than ".visually-hidden".

.a11y-only {
  border: 0;
  clip: rect(0 0 0 0);
  height: auto;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap; /* 1 */
  &.focusable:active,
  &.focusable:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
    white-space: inherit;
  }
}

// H5BP’s main.css: hide visually AND from screen readers, but maintain layout.
// NB can’t see me using this class directly but it does no harm to note here the role of "visibility: hidden;".

.invisible {
  visibility: hidden;
}




///////////////////////////////////
// Miscellaneous
///////////////////////////////////

// A better looking default horizontal rule

hr {
  // normalize.css
  box-sizing: content-box;
  height: 0;
  overflow: visible;
  // H5BP main.css
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
}


// Focus Outlines
// Remove the outline for mouse users but preserve it for keyboard users.
// Rule will be ignored by browsers that don’t support :focus-visible.
// Credit Lea Verou (https://twitter.com/leaverou/status/1045768279753666562)

:focus:not(:focus-visible) { outline: none }


// normalize.css: "Correct the inheritance and scaling of font size in all browsers. Correct the odd `em` font sizing in all browsers."

pre {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}


// normalize.css: "Add the correct display in Edge, IE 10+, and Firefox."

details {
  display: block;
}


// normalize.css: "Add the correct display in all browsers."

summary {
  display: list-item;
}


// Scott Hara: arrow styling for details/summary (from https://www.scottohara.me/blog/2018/09/03/details-and-summary.html)
// Covers styling for i) Firefox and other non-webkit/blink browsers; and ii) styling for webkit and blink
// Uncomment when I’ve got a different list icon I want to use rather than the browser’s default arrow.

//summary,
//summary::-webkit-details-marker {
//  list-style-image: url('/assets/svg/my_replacement_icon.svg');
//}


// normalize.css: "Add the correct display in IE 10+."

template {
  display: none;
}


// H5BP’s main.css: Clearfix: contain floats

.clearfix:before,
.clearfix:after {
  content: " "; /* 1 */
  display: table; /* 2 */
}

.clearfix:after {
  clear: both;
}


// Remove _all_ animations and transitions for people that prefer not to see them

@media (prefers-reduced-motion: reduce) {
  body {
    scroll-behavior: auto;
  }

  * {
    -webkit-animation: none !important;
            animation: none !important;
    transition: none !important;
  }
}
