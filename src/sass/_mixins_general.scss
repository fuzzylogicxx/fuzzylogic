// Add support for maths ability to raise a number to a certain power
// We’ll use this for example to get any value from a modular scale for our typography.

@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: $value / $number;
    }
  }

  @return $value;
}


// Serve HiDPI background images from any selector you’d like, just by creating two image assets and one line of SCSS

// Usage: @include retinize('icon-dribbble', 'png', 24px, 24px);
@mixin retinize($file, $type, $width, $height) {
  background-image: url('/assets/img/' + $file + '.' + $type);

  $is-hidpi: "(-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5),(min-resolution: 1.5dppx)";
  @media #{$is-hidpi} {
    & {
      background-image: url('/assets/img/' + $file + '_x2.' + $type);
      background-size: $width $height;
    }
  }
}


// Responsive utilities

@mixin at-least($device-width) {
  @media screen and (min-width: $device-width) {
    @content
  }
}

@mixin until($device-width) {
  @media screen and (max-width: $device-width - 1) {
    @content
  }
}


// Convert rem value to em, useful for local sizing
// e.g. the space between elements within a blockquote, as opposed to element font-size
// we use ems for local sizing so that the spacing will scale if font-sizes are changed.
// Example: get 1.2rem (20.16px) as an em value for an element with font-size 1.44rem (24.192px).
// 20.16/24.192 = 1.2/1.44 = 0.8333333333

//@function rem_to_em($targetValInRem, $contextValInRem) {
// @return $targetValInRem / $contextValInRem;
//}
