// Organisation Plan
  // Settings (Tokens etc),
  // Base (Reset and Global styles),
  // Utilities (Generics/Patterns/Layouts/Objects inc Stack, Box, ?VisuallyHidden?),
  // Components (Specifics),
  // Overrides

//

// Tokens

// $gorko-size-scale: (
//   '300': $gorko-base-size * 0.75,
//   '400': $gorko-base-size,
//   '500': $gorko-base-size * 1.33,
//   '600': $gorko-base-size * 1.77,
//   '700': $gorko-base-size * 2.36,
//   '800': $gorko-base-size * 3.15,
//   '900': $gorko-base-size * 4.2,
//   'major': $gorko-base-size * 5.6
// );

:root {
  --ratio: 1.5;
  --s-5: calc(var(--s-4) / var(--ratio));
  --s-4: calc(var(--s-3) / var(--ratio));
  --s-3: calc(var(--s-2) / var(--ratio));
  --s-2: calc(var(--s-1) / var(--ratio));
  --s-1: calc(var(--s0) / var(--ratio));
  --s0: 1rem;
  --s1: calc(var(--s0) * var(--ratio));
  --s2: calc(var(--s1) * var(--ratio));
  --s3: calc(var(--s2) * var(--ratio));
  --s4: calc(var(--s3) * var(--ratio));
  --s5: calc(var(--s4) * var(--ratio));

  --font-size-base: var(--s0);
  --font-size-biggish: var(--s2);
  --font-size-big: var(--s5);

  --line-height-extra-tight: 1.1;

  --measure: 60ch;

  --border-thin: 1px;

  --color-light: #fff;
  --color-dark: #000;
}

// RESETS (using some of https://piccalil.li/blog/a-modern-css-reset)

// Box-sizing
// Inheriting box-sizing is best practice
// https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/
html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}
// end best box-sizing

body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin: 0;
}

ul,
ol {
  margin-top: 0;
  margin-bottom: 0;
}

// BASE

// Lists
// Custom Lists
// https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html
// if role=list required adding we can assume we don’t want bullets.
ul[role='list'],
ol[role='list'] {
  list-style: none;
}

/* anchors that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
}

img {
  // normalize.css says "Remove the border on images inside links in IE 10."
  border-style: none;

  // Set images to display block globally because I can’t think
  // of anywhere you wouldn’t want this to be the case.
  display: block;

  // Support flexible images.
  // Provide the ability to reuse a single large <img> on wide and narrow viewports alike,
  // with measures in place so that even if it is wider than its container,
  // it will not overflow.
  // The result is that the image’s width will match one of three values:
  // 1. Its own intrinsic/natural width, based on the file data; OR
  // 2. An explicit HTML width attribute value, if present; OR
  // 3. The width of the horizontal space afforded by the container element; OR
  // 4. 60rem (a sensible image width limit) in cases where the container is wider than that.

  // 60rem seems a reasonable limit and will apply where min() is supported. Can tweak later.
  max-width: 100%;
  max-width: min(60rem, 100%);
}

// Ensure correct aspect ratio is preserved when
// i) current width is wider than 100% so max-width: 100% is being enforced; and
// ii) image has the HTML height attribute set
// while doing no harm otherwise.
img[height] {
  height: auto;
}

// explictly set an image to 100% container-width even if
// it has a width attribute (present for performance reasons) set to something narrower.
// Note: I have not included height: auto. It’s only required when the image has the
// HTML height attribute set, and I already have a rule dealing with that scenario above.
.img-full-parent-width {
  width: 100%;
}

// Make inputs and buttons inherit fonts */
input,
button,
textarea,
select {
  font: inherit;
}

// Remove all animations, transitions and smooth scroll for people that prefer not to see them
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

// End RESETS and BASE

// Sensible measure

* {
  max-width: var(--measure);
}

html,
body,
div,
header,
nav,
main,
footer {
  max-width: none;
}

// FONTS

@font-face {
  font-family: Source Sans Pro;
  src: url(/fonts/sans/SourceSans3-Regular-subset.woff2) format("woff2"),
       url(/fonts/sans/SourceSans3-Regular-subset.zopfli.woff) format("woff");
  font-weight: 400;
  font-display: swap;
}

@font-face {
  font-family: Source Sans Pro;
  src: url(/fonts/sans/SourceSans3-It-subset.woff2) format("woff2"),
       url(/fonts/sans/SourceSans3-It-subset.zopfli.woff) format("woff");
  font-weight: 400;
  font-style: italic;
  font-display: swap;
}

@font-face {
  font-family: Source Sans Pro;
  src: url(/fonts/sans/SourceSans3-Semibold-subset.woff2) format("woff2"),
       url(/fonts/sans/SourceSans3-Semibold-subset.zopfli.woff) format("woff");
  font-weight: 600;
  font-display: swap;
}

@media (min-width: 960px) {
  :root {
    // ↓ Upscale by 25% at 960px
    // works because we use relative rather than px values for element font sizing.
    // no need to update those elements individually.
    // font-size: 125%;

    // Experimental alternative approach
    // I might go back to reading distance based thinking
    font-size: calc(1rem + 0.5vw);
  }
}

body {
  font-family: 'Source Sans Pro', sans-serif;
  min-height: 100vh; // todo: check articles re. iPhone bottom bar
  line-height: var(--ratio);
}

// Element styles

h1, h2, h3, h4 {
  line-height: var(--line-height-extra-tight);
}

h1 {
  font-size: var(--s2);
}
h2 {
  font-size: var(--s1);
}
h3 {
  font-size: var(--s0);
}

// Utilities/Generics (Layouts etc)

// Hide (https://fuzzylogic.me/posts/how-to-hide-elements-for-different-browsing-contexts/)

.u-hidden-from-all,
[hidden] {
  display: none !important;
}

.u-visually-hidden:not(:focus):not(:active) {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.u-visually-hidden-revealable {
  left: -100vw;
  position: absolute;
}

// Box

.box {
  // display: block; // needed if it’s a custom element
  padding: var(--s1);
  border-width: var(--border-thin);

  // For high contrast mode, in case where we are not using a border.
  // NB the outline won’t be seen if not in a "high contrast mode activated" environment
  outline: var(--border-thin) solid transparent;
  outline-offset: calc(var(--border-thin) * -1);
}

.box * {
  color: inherit;
}

.box.invert {
  color: var(--color-light);
  background-color: var(--color-dark);
}

// Stack
// Note: stack doesn’t strictly need flexbox, but having `gap` available enables nesting stacks which have different custom property values.
.stack {
  --space: var(--s1);
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack > * {
  margin-top: 0;
  margin-bottom: 0;
}

.stack > * + * {
  margin-top: var(--space);
}

// Container

.container {
  width: 90vw;
  width: min(90vw, 70rem); // if it’s a flex child, use instead: width: clamp(16rem, 90vw, 70rem);
  margin-left: auto;
  margin-right: auto;
  padding-left: 1.5rem;
  padding-right: 1.5rem;
}

// Components/styles that are less reusable and more application-specific

// Components

// Banner
// .banner {
//   background: #000;
//   color: #fff;
// }

// Header

.global-header {
  //margin-top: var(--s1);
  // remove this once we set a proper layout
}

// Logo
.logo, .logo svg {
  display: block;
}

// .skip-links {
//   visibility: hidden;
//   opacity: 0;
//   transition: 0.2s;
//   transform: translateX(20px);
// }

// .skip-links a:focus,
// .skip-links a:focus ~ a {
//   visibility: visible;
//   opacity: 1;
//   transform: translateX(0);
// }

// Scott O’Hara’s skip links.
// https://codepen.io/scottohara/pen/QKmWJG
// It’s ideal when we’re hiding visually-only but also
// want our skip links layered/positioned ”on top” rather that in normal document flow, …
// and we want to animate the reveal.
// also: transform and opacity are good property choices for animation
// https://developers.google.com/web/fundamentals/design-and-ux/animations/animations-and-performance

// an alternative to .visually-hidden, preferable for
// content that will transition from off-screen to within the viewport upon focus.
// or maybe better to just say ”for visually-hidden content that also needs to be revealed”. (i.e. a subset of typical visually hidden reqts)
// I think it’s preferable here because we’re dealing with hiding a group rather than a single element,
// and where the contents of the group will need to be revealed.
// The other approach would shrink the links container and hide overflow so break ability to reveal inner content.

// Shift list left off-screen, and remove it from document layout flow.
.skip-links { // .visually-hidden-transitionable
  left: -100vw;
  position: absolute;
}

// fix anchors to top of page, and set a negative initial Y-axis value.
// (resulting in anchors starting ”above the page” so that they are animated downwards onto the page)
.skip-links a {
  background: #000;
  color: #fff;
  padding: .75em;
  position: fixed; // so, positioned relative to the viewport rather than its parent.
  left: 0;
  top: 0;
  opacity: 0;
  transform: translateY(-10em);
  transition: transform .2s ease-in-out,
              opacity .2s ease-in-out;
}

.skip-links a:focus {
  opacity: 1;
  transform: translateY(0em);
}

// Overrides

.u-font-size\:base {
  font-size: var(--font-size-base) !important;
}

.u-font-size\:biggish {
  font-size: var(--font-size-biggish);
}

.u-font-size\:big {
  font-size: var(--font-size-big) !important;
}

.u-max-width\:measure {
  max-width: var(--measure) !important;
}

.u-max-width\:none {
  max-width: none !important;
}

.u-max-width\:foo {
  max-width: none !important;
}
