/* ==========================================================================
   # CASCADE LAYERS DEFINTION
   ========================================================================== */

/**
 * Establish a layer order up-front, from lowest to highest priority.
 */

@layer base, layouts, links, components, utilities;


/* ==========================================================================
   # TOKENS
   ========================================================================== */

@layer base {
  :root {
    // Colours
    --color-dark: #141414;
    --color-light: #fff;
    --color-grey-with-hue: #f0f0f0;
    --color-grey: #eee;
    --color-grey-text: #757575;
    --color-link: rgb(14, 131, 123);
    --color-link-hover: rgb(8,78,73); /* 40% darker. Less than 30% wasn’t noticeable on hover */

    // Measure
    --measure: 65ch;
    --heading-measure: 50ch;

    // Borders
    --border-thin: 1px;
    --border-thick: 4px;

    // Fluid type, moving between two modular scales (i) tighter; and ii) more expansive)
    // @link https://utopia.fyi/type/calculator?c=320,17,1.067,1140,20,1.125,5,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l
    --step--2: clamp(0.93rem, calc(0.91rem + 0.11vw), 0.99rem);
    --step--1: clamp(1.00rem, calc(0.95rem + 0.23vw), 1.11rem);
    --step-0: clamp(1.06rem, calc(0.99rem + 0.37vw), 1.25rem);
    --step-1: clamp(1.13rem, calc(1.03rem + 0.53vw), 1.41rem);
    --step-2: clamp(1.21rem, calc(1.06rem + 0.73vw), 1.58rem);
    --step-3: clamp(1.29rem, calc(1.10rem + 0.95vw), 1.78rem);
    --step-4: clamp(1.38rem, calc(1.13rem + 1.22vw), 2.00rem);
    --step-5: clamp(1.47rem, calc(1.16rem + 1.53vw), 2.25rem);

    // Fluid space, moving between two modular scales (i) tighter; and ii) more expansive)
    // @link https://utopia.fyi/space/calculator?c=320,17,1.067,1140,20,1.125,5,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l
    --space-3xs: clamp(0.25rem, calc(0.23rem + 0.12vw), 0.31rem);
    --space-2xs: clamp(0.56rem, calc(0.54rem + 0.12vw), 0.63rem);
    --space-xs: clamp(0.81rem, calc(0.76rem + 0.24vw), 0.94rem);
    --space-s: clamp(1.06rem, calc(0.99rem + 0.37vw), 1.25rem);
    --space-m: clamp(1.63rem, calc(1.53rem + 0.49vw), 1.88rem);
    --space-l: clamp(2.13rem, calc(1.98rem + 0.73vw), 2.50rem);
    --space-xl: clamp(3.19rem, calc(2.97rem + 1.10vw), 3.75rem);
    --space-2xl: clamp(4.25rem, calc(3.96rem + 1.46vw), 5.00rem);
    --space-3xl: clamp(6.38rem, calc(5.94rem + 2.20vw), 7.50rem);

    // One-up pairs
    --space-3xs-2xs: clamp(0.25rem, calc(0.10rem + 0.73vw), 0.63rem);
    --space-2xs-xs: clamp(0.56rem, calc(0.42rem + 0.73vw), 0.94rem);
    --space-xs-s: clamp(0.81rem, calc(0.64rem + 0.85vw), 1.25rem);
    --space-s-m: clamp(1.06rem, calc(0.75rem + 1.59vw), 1.88rem);
    --space-m-l: clamp(1.63rem, calc(1.28rem + 1.71vw), 2.50rem);
    --space-l-xl: clamp(2.13rem, calc(1.49rem + 3.17vw), 3.75rem);
    --space-xl-2xl: clamp(3.19rem, calc(2.48rem + 3.54vw), 5.00rem);
    --space-2xl-3xl: clamp(4.25rem, calc(2.98rem + 6.34vw), 7.50rem);

    // Custom pairs
    --space-s-l: clamp(1.06rem, calc(0.50rem + 2.80vw), 2.50rem);
  }
}


/* ==========================================================================
   # FONTS
   ========================================================================== */

@layer base {

  @font-face {
    font-family: Source Sans Pro;
    src: url(/fonts/sans/SourceSans3-Regular-subset.woff2) format("woff2"),
        url(/fonts/sans/SourceSans3-Regular-subset.zopfli.woff) format("woff");
    font-weight: 400;
    font-display: swap;
  }

  @font-face {
    font-family: Source Sans Pro;
    src: url(/fonts/sans/SourceSans3-It-subset.woff2) format("woff2"),
        url(/fonts/sans/SourceSans3-It-subset.zopfli.woff) format("woff");
    font-weight: 400;
    font-style: italic;
    font-display: swap;
  }

  @font-face {
    font-family: Source Sans Pro;
    src: url(/fonts/sans/SourceSans3-Semibold-subset.woff2) format("woff2"),
        url(/fonts/sans/SourceSans3-Semibold-subset.zopfli.woff) format("woff");
    font-weight: 600;
    font-display: swap;
  }

}


/* ==========================================================================
   # SIMPLEST RESET (JUST A 1ST DRAFT)
   ========================================================================== */

/**
 * 1. Figure is for images, illustrations, diagrams, code snippets etc. No need
 * for any of those use cases to require the browser default inline margin.
 */

@layer base {

  :root {
    box-sizing: border-box;

    // Disable now-unnecessary iPhone behaviour
    // https://css-tricks.com/your-css-reset-needs-text-size-adjust-probably/
    text-size-adjust: none;
    -webkit-text-size-adjust: none;

    color: var(--color-dark);
    font-family: 'Source Sans Pro', system-ui, sans-serif;

    // At the :root level I like being explicit about the browser font-size default (16px).
    font-size: 100%;
  }

  *,
  *:before,
  *:after {
    box-sizing: inherit;
  }

  body, h1, h2, h3, h4, p, figure, blockquote, dl, dd {
    margin: 0;
  }

  body {
    font-size: var(--step-0);
    line-height: 1.4;

    // let’s get the footer displaying at the bottom of the viewport
    // regardless of the amount of <main> or <footer> content
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  .global-footer {
    margin-top: auto;
  }

  p, li, blockquote {
    max-width: var(--measure);
  }

  h1, h2, h3 {
    max-width: var(--heading-measure);
  }

  ul, ol {
    // Set margin and padding such that list markers
    // don’t hang out in the margin on the narrowest screens.
    // Note: it’s better to do it this way than set list-style-position
    // to `inside`. This way avoids text wrapping underneath marker.
    margin: 0 0 0 var(--space-m);
    padding: 0;

    // On wider screens we can allow hanging list bullets.
    // It’s a nice typographic effect.
    @media only screen and (min-width: 60em) {
      margin-left: 0;
    }
  }

  ul[role='list'],
  ol[role='list'] {
    list-style: none;
    margin-left: 0;
  }

  blockquote {
    border-left: var(--border-thick) solid var(--color-grey);
    padding-left: var(--space-xs);
    font-style: italic;
  }

  img,
  picture {
    max-width: 100%;
  }

  input, button, textarea, select {
    font: inherit;
  }

  svg {
    display: block;
  }

  /* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
  @media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }


  // Code snippets and blocks

  // https://css-tricks.com/styling-code-in-and-out-of-blocks/

  // For all <code>

  // https://github.com/h5bp/html5-boilerplate/blob/main/dist/css/normalize.css
  // …because browsers have weird sizing quirks for the code element.
  /**
  * 1. Correct the inheritance and scaling of font size in all browsers.
  * 2. Correct the odd `em` font sizing in all browsers.
  * 3. For the specific combo of monospace within Source Sans Pro, less than 1em works better.
  */
  code,
  kbd,
  samp,
  pre {
    font-family: monospace, monospace; /* 1 */
    font-size: 1em; /* 2 */
  }

  // Code in text
  p > code,
  li > code,
  dd > code,
  td > code {
    font-size: 0.95em; /* 3 */
    background: #ffeff0;
    word-wrap: break-word;

    // https://caniuse.com/css-boxdecorationbreak
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;

    padding: .1rem .3rem .2rem;
    border-radius: .2rem;
  }

  // Code blocks
  pre > code {
    display: block;
    background: none;
    white-space: pre;
    -webkit-overflow-scrolling: touch;
    overflow-x: scroll;
    max-width: 100%;
    min-width: 100px;
    padding: 0;
  }

}

/* ==========================================================================
   # LINKS
   ========================================================================== */

@layer links {

  a {
    color: var(--color-link);

    &:hover {
      color: var(--color-link-hover);
    }
  }

}


/* ==========================================================================
   # TYPOGRAPHY
   ========================================================================== */

@layer base {

  h1, h2, h3, h4, h5, h6 {
    font-weight: 600;
  }

  h1 {
    font-size: var(--step-4);
    line-height: 1;
  }

  h2 {
    font-size: var(--step-2);
    line-height: 1.1;
  }

  h3 {
    font-size: var(--step-1);
    line-height: 1.2;
  }

}


/* ==========================================================================
   # HIDING
   ========================================================================== */

/*
 * 1. Hide from all contexts
 * 2. Hide visually but not from keyboard navigation nor from screen readers.
 * Ref: Scott O’Hara’s best practice method https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html
 * 3. Alternative visually hidden technique for special cases when we want to animate content into view on focus…
 * …the most common example being the “Skip to content” pattern.
*/

@layer utilities {

  /* [1] */
  .u-hidden-from-all,
  [hidden] {
    display: none !important;
  }

  /* [2] */

  .u-visually-hidden:not(:focus):not(:active) {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px; /* stylelint-disable-line unit-disallowed-list */
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px; /* stylelint-disable-line unit-disallowed-list */
  }

  /* [3] */

  .u-hidden-until-focused {
    left: -100vw;
    position: absolute;

    &__item {
      z-index: 1;
      background: var(--color-link-hover);
      color: var(--color-light);
      left: 0;
      padding: 0.75em;
      position: fixed;
      top: 0;
      transform: translateY(-10em);
      transition: transform .2s ease-in-out;

      &:focus {
        transform: translateY(0em); /* stylelint-disable-line length-zero-no-unit */
      }
    }

    .u-hidden-until-focused__link {

      &:hover {
        color: var(--color-light);
      }
    }
  }

}

/* ==========================================================================
   # IMAGES
   ========================================================================== */

/*
 * 1. Remove the border on images in older browsers.
 * 2. Set images to display block because we will never want to display them inline.
 * 3. Prevent wide images from overflowing their parent, and cap their width sensibly.
 * 4. Ensure an image’s aspect ratio is maintained when it has the HTML height attribute set AND also CSS max-width has been triggered.
 * 5. Explictly set an image to 100% container-width so that we know it will achieve that width even if
      it has a width attribute (present for performance reasons) set to something narrower. Note: I have not included height: auto.
      It’s only required when the image has the HTML height attribute set and I already have a previous rule handling that.
*/

@layer base {

  img {
    /* [1] */
    border-style: none;

    /* [2] */
    display: block;

    /* [3] */
    max-width: 100%;
    max-width: min(60rem, 100%); /* stylelint-disable-line declaration-block-no-duplicate-properties */

    /* [4] */
    &[height] {
      height: auto;
    }
  }

}

@layer utilities {

  /* [5] */
  .u-full-parent-width {
    width: 100% !important;
  }

}

/* ==========================================================================
   # LAYOUTS
   ========================================================================== */


@layer layouts {

  // Flow

  .l-flow {

    & > * + * {
      margin-top: var(--flow-gap, var(--space-s));

      // Flow (https://piccalil.li/quick-tip/flow-utility/) / Stack ()
      // We want the ability to have:
      // - per-element exceptions within a single stack
      // - nested stacks where the nested one takes on default spacing rather than the
      // custom spacing that was set on a parent.
      // I think the key might be to use custom properties for per-element exceptions only.
      // The element the modified custom property should be applied to should be a stack child.
      // Might also (if nec.) consider including an extra div as "insulation" in nested stacks.
      // This part of EveryLayout’s docs feels important:
      // “Importantly we set the --space value on the children and don’t “hoist” it up.
      // If the parent is where the property is set, it will get overridden if the parent becomes
      // a child in nesting”
      // Feels like nesting should *just work?*
    }

    &--large > * + * {
      --flow-gap: var(--space-l, 1rem);
    }

  }

  // Box

  .l-box {
    padding: var(--space-s);
    border: var(--border-thin) solid;
    color: var(--color-dark);
    background-color: var(--color-light);

    * {
      color: inherit;
    }

    &--invert {
      color: var(--color-light);
      background-color: var(--color-dark);
    }

    &--outlined {
      border: 0 solid;
      outline: var(--border-thin) solid transparent;
      outline-offset: calc(var(--border-thin) * -1);
    }

    &--med {
      padding: var(--space-m);
    }
  }

  // Center

  .l-center {
    box-sizing: content-box;
    margin-inline: auto;
    max-inline-size: var(--measure);

    &--wrapper {
      max-inline-size: 60em;
    }

    &--wrapper-narrow {
      max-inline-size: 42em;
    }
  }

  // Cluster

  .l-cluster {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    flex-wrap: wrap;

    // if a --cluster-gap var is set, use that.
    // But we don’t set --cluster-gap with any default,
    // because (for now) when it’s passed in we want that value
    // to propagate to nested clusters too,
    // rather than the nested cluster resetting the gap to a default value.
    gap: var(--cluster-gap, var(--space-s));

    &--space-between {
      justify-content: space-between;
    }

    &--xs {
      --cluster-gap: var(--space-xs);
    }
  }

  // Switcher

  .l-switcher {
    --switcher-threshold: 30rem;
    --switcher-gap: var(--space-s, 1rem);

    display: flex;
    flex-wrap: wrap;
    gap: var(--switcher-gap);

    & > * {
      flex-grow: 1;
      flex-basis: calc((var(--switcher-threshold) - 100%) * 999);
    }

    & > :nth-last-child(n+4),
    & > :nth-last-child(n+4) ~ * {
      flex-basis: 100%;
    }
  }
}


/* ==========================================================================
   # ICONS
   ========================================================================== */

@layer components {

  .text-icon-pair { // todo: rename to .icon__with-text or similar
    display: inline-flex;
    align-items: center;
    gap: 0.125em;

    & > svg {
      width: 0.75em;
      height: 0.75em;
    }
  }

}





/* ==========================================================================
   # BUTTONS
   ========================================================================== */

// todo: the HTML should reuse .icon__with-text rather than reinventing.

@layer components {

  .btn-icon {
    display: flex;
    align-items: center;
    gap: 0.125em;
  }

}

/* ==========================================================================
   # TAGS
   ========================================================================== */

.tags {
  --cluster-gap: var(--space-2xs);
}


/* ==========================================================================
   # ARTICLES
   ========================================================================== */

// this is horrible. To do: sort the HTML out.

@layer components {

  // Lists of articles
  .h-feed > * + * {
    margin-top: var(--space-2xl);
  }

  // Individual articles
  .h-entry {
    // --flow-space: 1em;
  }

  .post__meta {
    color: var(--color-grey-text);
    font-size: var(--step--1);

    a {
      color: var(--color-grey-text);

      &:hover {
        color: var(--color-link-hover);
      }
    }
  }

  .post__header {
    display: flex;
    flex-direction: column-reverse;
  }

  .post__footer {
    // https://every-layout.dev/layouts/stack/#the-solution ("Exceptions" section)
    --flow-gap: var(--space-l, 1rem);
  }

  // h1.p-name {
  //   margin-top: var(--space-3xs);
  // }

  .direct-link {
    text-decoration: none;

    &:link,
    &:visited,
    &:active {
      color: transparent;
    }

    &:hover {
      color: var(--color-link-hover);
    }
  }

  .traverse {
    display: flex;
    justify-content: space-between;
  }

}

/* ==========================================================================
   # PAGE LAYOUT
   ========================================================================== */

@layer components {

  // Temporary way of setting measure just so that banner can be full-width but everything else not.
  .global-header, .primary-content, .global-footer {
    // max-width: 65ch;
    // margin: 1rem;

    //padding-inline: 1.5em; // temp
  }

}


/* ==========================================================================
   # BANNER
   ========================================================================== */

@layer components {

  .banner {
    background: #333;
    color: #fff;
    margin: 0; // ensure there’s no margin-top arising by mistake from a parent .flow class
    padding: 1em 1.5em;

    & > * {
      max-width: unset;
    }
  }

}


/* ==========================================================================
   # GLOBAL HEADER
   ========================================================================== */

@layer components {

  .global-header {
    // usually we want this to be the visually topmost element
    // (unless we’re showing a banner)
    // But local server software sometimes injects script elements above
    // and if the parent has a .flow class then the combination would give the header a margin we don’t want.
    // margin: 0;
    padding: var(--space-m) var(--space-s);
  }

}


/* ==========================================================================
   # PRIMARY CONTENT
   ========================================================================== */

   @layer components {

    .primary-content {
      // padding: var(--space-m) var(--space-s) var(--space-3xl);

      &__intro {
        background-color: var(--color-grey-with-hue);
        padding: var(--space-l) var(--space-s);
      }

      &__body {
        padding: 0 var(--space-s) var(--space-3xl) var(--space-s);

        .primary-content__intro + & {
          padding-top: var(--space-l);
        }
      }
    }

  }



/* ==========================================================================
   # LOGO
   ========================================================================== */

@layer components {

  .logo {
    color: var(--color-dark);
    font-size: 1.7em;
    text-decoration: none;
    display: flex;
    gap: 0.75rem;
    align-items: center;

    &:hover {
      color: var(--color-link-hover);
    }

    &__mark {
      margin-top: -0.35em;
    }

    &__text {
      font-size: var(--step-1);
      // font-size: 0.8em;
      // margin-block-start: 14px;
      // letter-spacing: -0.0125em;
    }
  }

}


/* ==========================================================================
   # PRIMARY NAV
   ========================================================================== */

   @layer components {

    .primary-navigation {
      // font-size: var(--step-1);
    }

  }


/* ==========================================================================
   # GLOBAL FOOTER
   ========================================================================== */

   @layer components {

    .global-footer {
      background-color: var(--color-grey-with-hue);
      padding: var(--space-m) var(--space-s);
      font-size: var(--step--1);

      &__grid {
        --switcher-gap: var(--space-m, 1rem);
      }

    }

  }


  /* ==========================================================================
   # MISC UTILITIES
   ========================================================================== */

@layer utilities {

  .u-display\:block {
    display: block;
  }

}
