---
layout: layout.liquid
title: Giffleball
pageTitle: Welcome to my blog
pagination:
  data: collections.posts
  size: 10
  reverse: true
  alias: posts
---

{% for post in posts %}
  <article>
    <h1>
      <a href="{{ post.url | url }}">{{ post.data.pageTitle }}</a>
    </h1>
    <em>{{ post.date | date: "%Y-%m-%d" }}</em>
  </article>
{% endfor %}

	<div class="intro">

	    <h1>Hi<span class="intro-last-full-stop">.</span></h1>
	    <p>I’m Laurence Hughes, a Glaswegian web developer, music maker, player of records and pinger of pongs. <a href="https://fuzzylogic.me/" rel="me">Fuzzy Logic</a> is my online home, where I try out web stuff and ramble about code, music and more.</p>
	</div>



<!-- <h2>Latest Posts</h2> -->


<ul class="hfeed listing">
    <li class="hentry">
    	<p class="entry-published date">08 August 2019</p>
    	
        <a href="/thoughts/saying-bye-bye-to-autoprefixer" rel="bookmark">
        
        
        <h3 class="entry-title">Saying bye-bye to autoprefixer</h3>
        
        
        </a>
        <div class="description entry-summary">
        	<p>For a while now I’ve been using <a href="https://www.npmjs.com/package/gulp-autoprefixer">gulp-autoprefixer</a> as part of my front-end build system. It’s a means of writing standard CSS then having the system automatically parse the rules and generate any necessary vendor-prefixed versions (such as <code>::-webkit-input-placeholder</code>).</p>

<p>I’ve often felt it excessive – like using a hammer to crack a nut. I’ve wondered if it might be doing more harm than good, by leading me to believe I have a magical sticking plaster for non-supporting browsers when actually (especially in the case of IE) the specific way in which a browser lacks support might be more nuanced. And I’ve never liked the noise generated by all those extra rules, especially when using the inspector to debug what would otherwise be just a few lines of CSS.</p> 

<p>But I always felt it was a necessary evil.</p> 

<p>However, I’ve just removed gulp-autoprefixer from my boilerplate. Why? Because:</p>

<ol>
<li>Browsers are no longer shipping any new CSS with prefixes, and as at 2019, they haven’t been for years;</li>
<li>With the browsers that <em>do</em> require prefixed CSS now old and in the minority, it feels like progressive enhancement rather than “kitchen sink” autoprefixing should take care of them. (Those browsers might not get the enhanced experience but what they’ll get will be fine.)</li>
</ol>

<p><a href="https://twitter.com/jensimmons/status/1067833878025564163">Jen Simmons’ tweet</a> was the push I needed. It’s just taken ‘til now to take the plunge!</p> 

<p>So I’ve removed one layer of complexity from my set-up, and so far nothing has exploded. Let’s see how it goes.</p>
        	<!-- <p><p>For a while now I’ve been using <a href="https://www.npmjs.com/package/gulp-autoprefixer">gulp-autoprefixer</a> as part of my front-end build system. It’s a means of…</p></p> -->
        	<!-- <p>Comments: 0</p> -->
        </div>
        
    </li>

    <li class="hentry">
    	<p class="entry-published date">07 August 2019</p>
    	
    	<h3 class="entry-title"><a href="https://cookieconsent.insites.com/">Cookie Consent by Osano | The most popular solution to the EU cookie law</a></h3>
        <div class="description entry-summary">
        	<p>Over the last year I’ve been successfully using <a href="https://cookieconsent.insites.com/"><em>Cookie Consent</em> by Osano</a> on a number of commercial websites. Essentially this is a banner which appears at the bottom (or top) of your website and asks the visitor to explicitly give (or decline to give) consent for the cookies your website uses. It’s a great free resource which handles the requisite GDPR requirements (and more) and offers a number of customisation options.</p>

<p>it’s very simple to include and use – you just step through their WYSIWYG generator, include the generated JavaScript-based settings in your site, and point to their CSS and JavaScript libraries. I like <a href="https://csswizardry.com/2019/05/self-host-your-static-assets/">self-hosting my own static assets</a> so I integrate the libraries into my code rather than linking to their externally hosted files, but that’s just my personal preference.</p>

<p>Why do we need this?</p>
<p>It’s because In 2018, the European Union’s General Data Protection Regulation (GDPR) went into effect, establishing a number of principles governing the collection of personal information. Any company or individual that processes personal information of European Union citizens must comply with the GDPR, regardless of where data is stored or processed.</p> 

<p>Cookies often collect information about their users that is not specifically identified with one individual, but if that information, combined with other data, can be used to identify an individual, it becomes “personal information” for the purposes of the GDPR and must be treated as such.</p> 

<p>The clearest and most effective way to notify a user in advance of the collection of information using cookies is to provide a web banner or “pop-up” cookie notice that appears automatically when the home page is accessed for the first time, and requires some affirmative action.</p>
        </div>
    	
    </li>

    <li class="hentry">
    	<p class="entry-published date">05 August 2019</p>
    	
    	<h3 class="entry-title"><a href="https://realfavicongenerator.net/">Real Favicon Generator</a></h3>
        <div class="description entry-summary">
        	<p>Knowing how best to serve, size and format favicons and other icons for the many different device types and operating systems can be a minefield. My current best practice approach is to create a 260px × 260px (or larger) source icon then upload it to <a href="https://realfavicongenerator.net/">Real Favicon Generator</a>. This is the tool <a href="https://css-tricks.com/favicon-quiz/">recommended by CSS-Tricks</a> and it takes care of most of the pain by not only generating all the formats and sizes you need but also providing some code to put in your <code>&lt;head&gt;</code> and <code>site.webmanifest</code> file.</p>
        </div>
    	
    </li>

    <li class="hentry">
    	<p class="entry-published date">03 August 2019</p>
    	
        <a href="/bytes/everybody-in-the-place" rel="bookmark">
        
        
        <h3 class="entry-title">Everybody in the Place</h3>
        
        
        </a>
        <div class="description entry-summary">
        	<p>Enjoyed this <a href="https://www.bbc.co.uk/programmes/m000777d">acid house history lesson</a> from Jeremy Deller – especially some of the footage from the early Manchester scene which I hadn’t seen before.</p>
        	<!-- <p><p>Enjoyed this <a href="https://www.bbc.co.uk/programmes/m000777d">acid house history lesson</a> from Jeremy Deller – especially some of the footage from the early Manchester…</p></p> -->
        	<!-- <p>Comments: 0</p> -->
        </div>
        
    </li>

    <li class="hentry">
    	<p class="entry-published date">01 August 2019</p>
    	
        <a href="/bytes/dave-ruperts-bookshelf" rel="bookmark">
        
        
        <h3 class="entry-title">Dave Rupert’s Bookshelf</h3>
        
        
        </a>
        <div class="description entry-summary">
        	<p>Just saw this – <a href="https://daverupert.com/bookshelf/">https://daverupert.com/bookshelf/</a> – and now I really need to up my book-logging game! Really nice, and a good excuse for some CSS Grid, too.</p>
        	<!-- <p><p>Just saw this – <a href="https://daverupert.com/bookshelf/">https://daverupert.com/bookshelf/</a> – and now I really need to up my book-logging game! Really nice, and…</p></p> -->
        	<!-- <p>Comments: 0</p> -->
        </div>
        
    </li>

    <li class="hentry">
    	<p class="entry-published date">01 August 2019</p>
    	
        <a href="/thoughts/a-visit-from-the-goon-squad-by-jennifer-egan" rel="bookmark">
        
        
        <h3 class="entry-title">A Visit from the Goon Squad, by Jennifer Egan</h3>
        
        
        <img 
        srcset="/console/resources/a881d547-b147-43ef-bc5d-a7c41e937dec-w320.jpeg 320w,
                 480w, 
                /console/resources/a881d547-b147-43ef-bc5d-a7c41e937dec-w640.jpeg 640w, 
                /console/resources/a881d547-b147-43ef-bc5d-a7c41e937dec-w752.jpeg 752w, 
                /console/resources/a881d547-b147-43ef-bc5d-a7c41e937dec-w960.jpeg 960w, 
                /console/resources/a881d547-b147-43ef-bc5d-a7c41e937dec-w1400.jpeg 1400w"
        sizes="(max-width: 59em) 90vw, 
               (max-width: 105em) 50vw,
               960px" 
        src="/console/resources/a881d547-b147-43ef-bc5d-a7c41e937dec.jpeg" alt="A photo of the book “A Visit from the Goon Squad” by Jennifer Egan" />
        
        </a>
        <div class="description entry-summary">
        	<p>I really enjoyed this book, recommended to me by <a href="https://twitter.com/Gilco80">Gillian</a> and <a href="https://twitter.com/mrtomchurchill">Tom</a>.</p> 
<p>It’s set primarily in New York and tells the stories of a cast of interconnected characters (and their children) linked by the music industry, taking in themes of youth and ageing, loss and regret, insecurity, celebrity and image.</p>
<p>There are some great moments including Rob’s story which called to mind <a href="https://www.imdb.com/title/tt0134119/">The Talented Mr Ripley</a>; Jules’s unpublished and unhinged newspaper article on the celebrity interview which sent him to jail; and the dystopian final chapter which suggests where the internet and the world of influencers might be headed if we don’t watch out.</p>
<p>I loved author Jennifer Egan’s storytelling, dark humour and also the way she switched her writing style dependent on the era or character.</p> 
<p>Recommended!</p>
        	<!-- <p><p>I really enjoyed this book, recommended to me by <a href="https://twitter.com/Gilco80">Gillian</a> and <a href="https://twitter.com/mrtomchurchill">Tom</a>.</p> 
<p>It’s set primarily in New York…</p></p> -->
        	<!-- <p>Comments: 0</p> -->
        </div>
        
    </li>

    <li class="hentry">
    	<p class="entry-published date">31 July 2019</p>
    	
    	<h3 class="entry-title"><a href="http://evanminto.com/blog/intrinsically-responsive-css-grid-minmax-min/">Intrinsically Responsive CSS Grid with minmax() and min()</a></h3>
        <div class="description entry-summary">
        	<p>In this article, Evan Minto notes that flexible grids created with CSS Grid’s <code>repeat</code>, <code>auto-fill</code>, and <code>minmax</code> features are responsive to their container up to a point, however when the container is smaller than the minimum width value specified in <code>minmax</code>, the items overflow that container.</p>

<p>Since the approach is not fully intrinsic, we could add media queries into the mix however because media queries are based on the viewport rather than the container this is still not a proper solution. This is why resources like <a href="https://every-layout.dev/">Every Layout</a> generally avoid media queries and CSS Grid, instead achieving intrinsic responsiveness through Flexbox.</p>

<p>Thankfully we’ll soon be able to suggest grid item width as a percentage of the parent container, avoiding the overflow problem. The new “CSS Math functions” to help us achieve this are <code>min()</code>, <code>max()</code> and <code>clamp()</code>. At the time of writing, these are <a href="https://caniuse.com/#feat=css-math-functions">only supported in Safari</a> however Chrome support is in the pipeline.</p>
        </div>
    	
    </li>

    <li class="hentry">
    	<p class="entry-published date">23 July 2019</p>
    	
    	<h3 class="entry-title"><a href="https://3dtransforms.desandro.com/">Intro to CSS 3D transforms</a></h3>
        <div class="description entry-summary">
        	<p>Excellent tutorials by David DeSandro. I’ve already used the <a href="https://3dtransforms.desandro.com/card-flip">card flip</a> and it worked really well.</p>
        </div>
    	
    </li>

    <li class="hentry">
    	<p class="entry-published date">23 July 2019</p>
    	
    	<h3 class="entry-title"><a href="https://flickity.metafizzy.co/">Flickity – touch, responsive, flickable carousels</a></h3>
        <div class="description entry-summary">
        	<p>This slider/carousel certainly looks nice, and I like author David DeSandro’s work, having taken inspiration from his <a href="https://3dtransforms.desandro.com/card-flip">3d Card Flip tutorial</a> for a recent project.</p> 
<p>I just want to dig into it a little further to see how it fares in terms of accessibility before using it in the wild.</p>
        </div>
    	
    </li>

    <li class="hentry">
    	<p class="entry-published date">22 July 2019</p>
    	
    	<h3 class="entry-title"><a href="https://paveldogreat.github.io/WebGL-Fluid-Simulation/">WebGL Fluid Simulation</a></h3>
        <div class="description entry-summary">
        	<p>Here’s a really striking effect – especially on touch-enabled devices as it’s reactive to swipe, drag, and multi-touch.</p>

<p>Canvas and WebGL seem to be at the heart of it, although I’ll need to dig into the source to see exactly what’s going on!</p>
        </div>
    	
    </li>

    </ul>
    
        <div class="paging">
            Page 1 of 9
            
            
            
                <a href="/?page=2">Next</a>
            
        </div>
    
<!-- <a class="more-posts" href="/blog/archive/">Browse older posts</a> -->


</main>
